:) Logic:
The logic is simple to keep two pointers fast and slow each time fast will increment by 2 place and slow will increment by 1
place until fast && fast->next becomes false. then simply return slow pointer which will be containg the node with mid pos.

:) Code:
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* p1 = head, *p2 = head;
        while(p2 && p2->next)
        {
            p1=p1->next;
            p2=p2->next->next;
        }
        
        return p1;
    }
};

:) Complexity 
T.C: O(N)
S.C: O(1)