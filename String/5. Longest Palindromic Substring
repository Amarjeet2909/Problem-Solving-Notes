leetcode: https://leetcode.com/problems/longest-palindromic-substring/description/
***********************************************************************************************************************

Problem: Given a albhabet string we have to ouput the logest palindrome substring of that string

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

************************************************************************************************************************

Logic:) The problem can be divided into two cases one when given string length is odd and another when it's even. there is 
very small logic difference b/w both cases.

-> Take two pointers left and right initialized at (in case of even left = i and right = i+1) and (in case of odd left = i and right = i)
-> check if str[left]==str[right] and decrement left by 1 and increment right by 1, if not equal then break
-> After the iteration calculate max length of substring

Code:)

class Solution {
public:
    string longestPalindrome(string s) 
    {
        int n=s.length();
        int maxLen=1;
        int start=0, end=0;
        if(n<=1) return s;

        // odd length
        for(int i=0;i<n-1;++i)
        {
            int l=i, r=i;
            while(l>=0 && r<n)
            {
                if(s[l]==s[r]) 
                {
                    l--;
                    r++;
                }
                else
                break;
            }
            int len = r-l-1;
            if(len>maxLen)
            {
                maxLen=len;
                start=l+1;
                end=r-1;
            }
        }

        // even length
        for(int i=0;i<n-1;++i)
        {
            int l=i, r=i+1;
            while(l>=0 && r<n)
            {
                if(s[l]==s[r]) 
                {
                    l--;
                    r++;
                }
                else
                break;
            }
            int len = r-l-1;
            if(len>maxLen)
            {
                maxLen=len;
                start=l+1;
                end=r-1;
            }
        }

        return s.substr(start,maxLen);
    }
};

Complexity:)
T.C: O(N)
S.C:O(1)